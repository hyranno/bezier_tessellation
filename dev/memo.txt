
タスク
  Readme書く
  edgeをpoint-normalな表現からCubicBezierに変更する
  coneのcylinder変形バージョン
  cone, cylinderの底面で見られる異常normalの修正


built-in variables
  https://www.khronos.org/opengl/wiki/Built-in_Variable_(GLSL)

vertex
tes_control
  EdgeLengthBasedTess
tes_eval
  PN Triangle
fragment
  zwrite
  normalだけで色を決定



vec3 vertices
vec3 normals
edges
  uint vertexIds[2]
  uint normalIds[2]
faces
  uint edgeId[3]

/* can be calculated by the faces, edges */
face_vertices  //index buffer



ある点で定められた法線と、その点を端点とする辺が直交する
  <-> その点と接続する制御点が、その点での接平面上にある

上を満たす辺を共有する曲面の法線が、その辺の上で一致する
  ただし各曲面の制御点は独立に定めたい
  <- 辺の上の法線が、その辺と端点の情報のみで定められる

面の法線が不連続でも辺を共有することがある
  法線が不連続な場合でも同じデータ形式やアルゴリズムで処理したい
  面は点(vertex)ではなく辺(edge)の集合で表した方がよい

異なるpatch間で共有される辺は同じようにtessellateしないと亀裂が生じる
  <- gl_TessLevelOuterは辺の情報で決定する



DCCツールへの適用
point-normalな表現ではなくbezier curveをそのまま触れる方が自由度が高いし分かりやすくもあるか?
  法線連続についてはvertex上のnormal(ファイル出力しない)を編集して、接続する制御点を束縛する
  curveはbezierじゃなくてもよさそう



辺12の上のn12を適当に定める
(p01, n01) : cubic_curve(c300, c210, c120, c030, t0/(t0+t1), t1/(t0+t1))$
(p12, n12) : cubic_curve(c030, c021, c012, c003, t1/(t1+t2), t2/(t1+t2))$
(p20, n20) : cubic_curve(c003, c102, c201, c300, t2/(t2+t0), t0/(t2+t0))$
p : pn_triangle(p01, p12, p20, n01, n12, n20, t01, t12, t01)$



分配則
  dot(a, b+c) = dot(a, b) + dot(a, c)
  cross(a, b+c) = cross(a, b) + cross(a, c)
ベクトル三重積
  cross(a, cross(b,c)) = -dot(a,b)*c -dot(c,a)*b
cross(b-a, c-a)
  = +cross(b,c) +cross(c,a) +cross(a,b)
  = cross(c-b, a-b)
  = cross(a-c, b-c)
dot(a, cross(b, c)) = dot(c, cross(a, b)) = dot(b, cross(c, a))


正弦定理
2*R
  = 1/sin(a0) *length(v2-v0) *length(v1-v0)
  = 1/sin(a1) *length(v0-v1) *length(v2-v1)
  = 1/sin(a2) *length(v1-v2) *length(v0-v2)

余弦定理
length(v2-v1) = +length(v2-v0)^2 +length(v1-v0)^2 -2*length(v2-v0)*length(v1-v0)*cos(a0)

回転
ベクトルrを軸nまわりにaだけ回転
  r*cos(a) +n*(n.r)*(1-cos(a)) +cross(n, r)*sin(a)


