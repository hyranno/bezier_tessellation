
タスク
  いくつかの形状を試す
    円筒
    カプセル
  Readme書く


built-in variables
  https://www.khronos.org/opengl/wiki/Built-in_Variable_(GLSL)

vertex
tes_control
  EdgeLengthBasedTess
tes_eval
  PN Triangle
fragment
  zwrite
  normalだけで色を決定



vec3 vertices
vec3 normals
edges
  uint vertexIds[2]
  uint normalIds[2]
faces
  uint edgeId[3]

/* can be calculated by the faces, edges */
face_vertices  //index buffer



ある点で定められた法線と、その点を端点とする辺が直交する
  <-> その点と接続する制御点が、その点での接平面上にある

上を満たす辺を共有する曲面の法線が、その辺の上で一致する
  ただし各曲面の制御点は独立に定めたい
  <- 辺の上の法線が、その辺と端点の情報のみで定められる
    <- 制御点c211, c121, c112 を端点と一致させる

面の法線が不連続でも辺を共有することがある
  法線が不連続な場合でも同じデータ形式やアルゴリズムで処理したい
  面は点(vertex)ではなく辺(edge)の集合で表した方がよい

異なるpatch間で共有される辺は同じようにtessellateしないと亀裂が生じる
  <- gl_TessLevelOuterは辺の情報で決定する



DCCツールへの適用
point-normalな表現ではなくbezier curveをそのまま触れる方が自由度が高いし分かりやすくもあるか?
  法線連続についてはvertex上のnormal(ファイル出力しない)を編集して、接続する制御点を束縛する
  cubic bezier curveを扱えるならquarticに変換可能



t2=0 のとき法線がv2, n12_2, n20_2に依存しない
t0=1-t2-t1 として
n = normalize(cross(dp_dt2, dp_dt1))

Cubic Bezier Triangle では無理
  4次(quartic)
  6次(hexic)になると制御点の描く3角形が3重になる


分配則
  dot(a, b+c) = dot(a, b) + dot(a, c)
  cross(a, b+c) = cross(a, b) + cross(a, c)
ベクトル三重積
  cross(a, cross(b,c)) = -dot(a,b)*c -dot(c,a)*b
cross(b-a, c-a)
  = +cross(b,c) +cross(c,a) +cross(a,b)
  = cross(c-b, a-b)
  = cross(a-c, b-c)


幾つかのパターンで接線連続が保たれない?
  全ての辺が同一平面上にある場合(法線も同一平面上?)
